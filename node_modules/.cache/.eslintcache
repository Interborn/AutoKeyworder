[{"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\index.js":"1","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\App.jsx":"2","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\pages\\Home.jsx":"3","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\NavBar.jsx":"4","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\pages\\UpscaleUploadPage.jsx":"5","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\OtherProducts.jsx":"6","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\Footer.jsx":"7","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\Guides.jsx":"8","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\functional\\ListLookView.jsx":"9","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-upload\\UpscaleImageInput.jsx":"10","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-upload\\UpscaleListLookView.jsx":"11","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleImageSlider.jsx":"12","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleInformationalPieces.jsx":"13","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleFAQ.jsx":"14","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleBlog.jsx":"15","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleLetter.jsx":"16","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleVideoSlider.jsx":"17","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleHomeHero.jsx":"18","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleInput.jsx":"19","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-upload\\UpscaleSharePopup.jsx":"20","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\ComingSoon.jsx":"21","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleHeroItem.jsx":"22","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleImageSlide.jsx":"23"},{"size":265,"mtime":1699476893045,"results":"24","hashOfConfig":"25"},{"size":438,"mtime":1699983257235,"results":"26","hashOfConfig":"25"},{"size":1188,"mtime":1700765001316,"results":"27","hashOfConfig":"25"},{"size":1385,"mtime":1700688874562,"results":"28","hashOfConfig":"25"},{"size":1096,"mtime":1700598056220,"results":"29","hashOfConfig":"25"},{"size":3188,"mtime":1699929236931,"results":"30","hashOfConfig":"25"},{"size":3117,"mtime":1699863897232,"results":"31","hashOfConfig":"25"},{"size":9666,"mtime":1700769520261,"results":"32","hashOfConfig":"25"},{"size":4980,"mtime":1699738568369,"results":"33","hashOfConfig":"25"},{"size":11755,"mtime":1700598039127,"results":"34","hashOfConfig":"25"},{"size":10212,"mtime":1700688168361,"results":"35","hashOfConfig":"25"},{"size":3167,"mtime":1700762649482,"results":"36","hashOfConfig":"25"},{"size":2174,"mtime":1700765753885,"results":"37","hashOfConfig":"25"},{"size":6000,"mtime":1699929255412,"results":"38","hashOfConfig":"25"},{"size":2002,"mtime":1699928585976,"results":"39","hashOfConfig":"25"},{"size":1607,"mtime":1699929307568,"results":"40","hashOfConfig":"25"},{"size":2584,"mtime":1700710475298,"results":"41","hashOfConfig":"25"},{"size":2456,"mtime":1700765493448,"results":"42","hashOfConfig":"25"},{"size":6149,"mtime":1699863939627,"results":"43","hashOfConfig":"25"},{"size":253,"mtime":1700163811426,"results":"44","hashOfConfig":"25"},{"size":177,"mtime":1700160751533,"results":"45","hashOfConfig":"25"},{"size":2856,"mtime":1700760481547,"results":"46","hashOfConfig":"25"},{"size":738,"mtime":1700761304917,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"ua2tpp",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"51"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"51"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\index.js",[],[],["125"],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\App.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\pages\\Home.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\NavBar.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\pages\\UpscaleUploadPage.jsx",["126"],[],"import React, { useState, useEffect } from 'react'\r\nimport NavBar from '../components/global/NavBar'\r\nimport Footer from '../components/global/Footer'\r\nimport OtherProducts from '../components/global/OtherProducts'\r\nimport UpscaleImageInput from '../components/upscale-upload/UpscaleImageInput'\r\nimport ListLookView from '../components/upscale-upload/UpscaleListLookView'\r\n\r\nconst UpscaleUploadPage = () => {\r\n\r\n  const [isUpscaled, setIsUpscaled] = useState(false);\r\n  const [uploadedFiles, setUploadedFiles] = useState([]);\r\n  const [isQualitySet, setIsQualitySet] = useState(false);\r\n  \r\n  const onUploadClicked = (files, upscaled, quality) => {\r\n    setUploadedFiles(files);\r\n    setIsUpscaled(upscaled);\r\n    setIsQualitySet(quality);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <UpscaleImageInput onUploadClicked={onUploadClicked} />\r\n      <ListLookView \r\n        uploadedFiles={uploadedFiles} \r\n        isUpscaled={isUpscaled} \r\n        isQualitySet={isQualitySet} \r\n      />\r\n      <OtherProducts />\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UpscaleUploadPage\r\n","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\OtherProducts.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\Footer.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\Guides.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\functional\\ListLookView.jsx",[],[],["127"],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-upload\\UpscaleImageInput.jsx",["128","129","130","131","132","133","134","135","136","137"],[],"import React, { useRef, useState, useEffect } from 'react';\r\nimport uploadIcon from '../../assets/upload-icon.png';\r\n\r\n/**\r\n * Component for updating image input with drag and drop functionality.\r\n * @param {Function} onUploadClicked - Callback function triggered on upload.\r\n */\r\nfunction UpscaleImageInput({ onUploadClicked }) {\r\n    // Refs for DOM elements\r\n    const dropzoneRef = useRef(null);\r\n    const fileInputRef = useRef(null);\r\n    const fileListRef = useRef(null);\r\n\r\n    // State variables\r\n    const [uploadedFiles, setUploadedFiles] = useState([]);\r\n    const [isUpscaled, setIsUpscaled] = useState(false);\r\n    const [isQualitySet, setIsQualitySet] = useState(false);\r\n    const [isUploadClicked, setIsUploadClicked] = useState(false);\r\n    const [isFileAdded, setIsFileAdded] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isFolderUploaded, setIsFolderUploaded] = useState(false);\r\n\r\n    // Function to process a directory recursively\r\n    const processDirectory = (item, path = '') => {\r\n        return new Promise((resolve, reject) => {\r\n            if (item.isFile) {\r\n                // If the item is a file, get the file and process it\r\n                item.file(file => {\r\n                    resolve({\r\n                        file: file,\r\n                        webkitRelativePath: path + file.name\r\n                    });\r\n                }, reject);\r\n            } else if (item.isDirectory) {\r\n                // If the item is a directory, create a directory reader\r\n                const dirReader = item.createReader();\r\n                dirReader.readEntries(entries => {\r\n                    // Recursively process each entry in the directory\r\n                    const promises = entries.map(entry =>\r\n                        processDirectory(entry, path + item.name + '/')\r\n                    );\r\n                    Promise.all(promises).then(files => {\r\n                        resolve(files.flat());\r\n                    }).catch(reject);\r\n                }, reject);\r\n            }\r\n        });\r\n    };\r\n    \r\n    // Effect hook to handle drag and drop events\r\n    useEffect(() => {\r\n        // Drag and drop event handlers\r\n        const handleDragEnter = (e) => {\r\n            e.preventDefault();\r\n        };\r\n\r\n        const handleDragOver = (e) => {\r\n            e.preventDefault();\r\n        };\r\n\r\n        // Function to handle drop event\r\n        const handleDrop = async (e) => {\r\n            e.preventDefault();\r\n        \r\n            const items = e.dataTransfer.items;\r\n            const filePromises = [];\r\n        \r\n            for (let i = 0; i < items.length; i++) {\r\n                const entry = items[i].webkitGetAsEntry();\r\n                if (entry) {\r\n                    filePromises.push(processDirectory(entry));\r\n                }\r\n            }\r\n        \r\n            const files = (await Promise.all(filePromises)).flat();\r\n            const filesWithLoadingState = files.map(file => ({\r\n                file: file,\r\n                isLoading: true\r\n            }));\r\n            \r\n            setUploadedFiles(filesWithLoadingState);\r\n            onUploadClicked(filesWithLoadingState, true, true); // Updated\r\n            setIsLoading(true);\r\n            handleSubmit(files); // Pass only the file data to handleSubmit\r\n        };\r\n                \r\n        const handleChange = (e, isFolder = false) => {\r\n            const uploadedFiles = e.target.files;\r\n            const fileObjects = Array.from(uploadedFiles).map(file => ({\r\n                file: file,\r\n                webkitRelativePath: isFolder ? file.webkitRelativePath : file.name,\r\n                isLoading: true\r\n            }));\r\n            \r\n            setUploadedFiles(fileObjects);\r\n            onUploadClicked(fileObjects, true, true); // Updated\r\n            setIsLoading(true);\r\n            handleSubmit(fileObjects); // Pass only the file data to handleSubmit\r\n        };\r\n\r\n        // DOM elements\r\n        const dropzone = dropzoneRef.current;\r\n\r\n        // Event listeners for drag and drop\r\n        dropzone.addEventListener('dragenter', handleDragEnter);\r\n        dropzone.addEventListener('dragover', handleDragOver);\r\n        dropzone.addEventListener('drop', handleDrop);\r\n        fileInputRef.current.addEventListener('change', handleChange);\r\n\r\n        // Cleanup: remove event listeners\r\n        return () => {\r\n            dropzone.removeEventListener('dragenter', handleDragEnter);\r\n            dropzone.removeEventListener('dragover', handleDragOver);\r\n            dropzone.removeEventListener('drop', handleDrop);\r\n            fileInputRef.current.removeEventListener('change', handleChange);\r\n        };\r\n    }, [isUploadClicked, dropzoneRef, fileInputRef]);\r\n\r\n    // Function to format bytes into readable size\r\n    const formatBytes = (bytes) => {\r\n        if (bytes === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    };\r\n\r\n    // Function to handle form submission\r\n    const handleSubmit = async (files) => {\r\n        // Create FormData from the form\r\n        const formData = new FormData(document.getElementById('folderUpload-formBody'));\r\n      \r\n        // Clear file list display\r\n        fileListRef.current.innerHTML = '';\r\n        let totalSize = 0;\r\n        let isFolder = false;\r\n\r\n        // Process each file\r\n        for (const fileData of files) {\r\n            const { file, webkitRelativePath } = fileData; // Destructure fileData\r\n            totalSize += file.size;\r\n            if (webkitRelativePath) {\r\n                isFolder = true;\r\n            }\r\n\r\n            // Set file name and size for each file in the file list\r\n            const fileListItem = document.createElement('div');\r\n            fileListItem.textContent = `${file.name} - ${formatBytes(file.size)}`;\r\n            fileListRef.current.appendChild(fileListItem);\r\n\r\n            // Append each file to FormData\r\n            formData.append('folderUpload', file, webkitRelativePath);\r\n        }\r\n      \r\n        // Set state based on whether a folder is uploaded\r\n        setIsFolderUploaded(isFolder);\r\n      \r\n        if (isFolder) {\r\n          // Display folder name and total size\r\n          const folderName = files[0].webkitRelativePath.split('/')[0];\r\n          fileListRef.current.textContent = `${files.length} ${files.length <= 1 ? 'file' : 'files'}, ${formatBytes(totalSize)} total size`;\r\n        } else {\r\n          // Display number of files and their total size\r\n          fileListRef.current.textContent = `${files.length} ${files.length <= 1 ? 'file' : 'files'}, ${formatBytes(totalSize)} total size`;\r\n        }\r\n      \r\n        // Set isUpscaled and isQualitySet based on checkbox values\r\n        const upscaleImages = 'true';\r\n        setIsUpscaled(upscaleImages);\r\n        const qualitySet = 'true';\r\n        setIsQualitySet(qualitySet);\r\n      \r\n        // Append qualitySet and upscaleImages to FormData\r\n        formData.append('qualitySet', qualitySet);\r\n        formData.append('upscaleImages', upscaleImages);\r\n      \r\n        try {\r\n          // Send a POST request to upload files\r\n          const response = await fetch('http://localhost:3001/uploads', {\r\n            method: 'POST',\r\n            body: formData,\r\n          });\r\n      \r\n          if (response.ok) {\r\n            console.log('Folder uploaded successfully');\r\n            // Get the response body\r\n            const text = await response.text();\r\n            console.log('Server Response:', text);\r\n      \r\n            // Fetch updated photoList.json\r\n            const photoListResponse = await fetch('http://localhost:3001/photoList');\r\n            const newPhotoList = await photoListResponse.json();\r\n            setUploadedFiles(newPhotoList);\r\n              \r\n            const updatedFiles = newPhotoList.map(file => ({\r\n                ...file,\r\n                isLoading: false  // Set loading to false as files are processed\r\n            }));\r\n            setUploadedFiles(updatedFiles);\r\n            onUploadClicked(updatedFiles, true, qualitySet); // Notify parent about the update\r\n\r\n          }\r\n        } catch (error) {\r\n          console.error('There was a problem with the upload:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex lg:flex-row flex-col w-full transition-container bg-stone-950 items-center justify-center py-28 -mb-12\">\r\n            \r\n            <div className=\"image-input h-full w-full pt-5 pb-7 flex flex-col items-center px-4 gap-14\">\r\n\r\n                <h1 className={`text-[50px] lg:max-w-[26ch] font-bold text-indigo-200 text-center transition-all duration-700  ${isLoading ? '-mb-[275px]' : 'mab-0'}`}>Upload an image, video, or folder to upscale the quality</h1>\r\n\r\n                <form id=\"folderUpload-formBody\" onSubmit={handleSubmit} encType=\"multipart/form-data\" className={`w-full flex justify-center bg-stone-950`}>\r\n\r\n                    {/* DROP ZONE */}\r\n                    <div className='w-full h-full flex flex-col items-center gap-2'>\r\n                        <div\r\n                            ref={dropzoneRef}\r\n                            className={`bg-stone-900 px-8 py-20 text-center rounded-lg border-dashed border-2 hover:border-indigo-400 transition duration-300 ease-in-out transform hover:shadow-lg lg:max-w-[600px] lg:max-h-[600px] w-full ${isFileAdded ? 'border-indigo-400' : 'border-indigo-200'}`}\r\n                        >\r\n                            <label htmlFor=\"fileInput\" className=\"cursor-pointer flex flex-col items-center space-y-2\">\r\n                                <svg className={`w-16 h-16 text-indigo-200 group-hover:text-indigo-400 transition duration-300 ease-in-out transform ${isFileAdded ? 'text-indigo-400' : 'text-indigo-200'}`} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\r\n                                </svg>\r\n                                <span className={`text-indigo-200 group-hover:text-indigo-400 transition duration-300 ease-in-out transform ${isFileAdded ? 'text-indigo-400' : 'text-indigo-200'}`}>Drag and drop your files here</span>\r\n                                <span className={`text-indigo-200 group-hover:text-indigo-400 text-sm transition duration-300 ease-in-out transform ${isFileAdded ? 'text-indigo-400' : 'text-indigo-200'}`}>(or click to select)</span>\r\n                            </label>\r\n                            <input id=\"fileInput\" ref={fileInputRef} type=\"file\" className=\"hidden file-list\" name=\"folderUpload\" webkitdirectory=\"true\" directory=\"true\" multiple />\r\n                        </div>\r\n                    \r\n\r\n                        {/* OPTION BUTTONS */}\r\n                        <div className={`flex w-full items-center justify-center gap-3 cursor-not-allowed lg:max-w-[600px] lg:max-h-[600px] transition-opacity ease-in duration-700 ${isLoading ? 'opacity-100' : 'opacity-0'}`}>\r\n                            {/* REFERENCE BOX */}\r\n                            <div className=\"flex flex-col w-full items-center gap-3 ml-1\">\r\n                                <div className=\"text-center w-full text-indigo-950 ring-indigo-400 bg-indigo-300 bg-opacity-50 ring-2 py-1.5 h-[36px]\" ref={fileListRef}></div>                    \r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpscaleImageInput;","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-upload\\UpscaleListLookView.jsx",["138"],[],"import React, { useEffect, useState } from 'react';\r\nimport discord from '../../assets/discord.png';\r\nimport facebook from '../../assets/facebook.png';\r\nimport instagram from '../../assets/instagram.png';\r\nimport messenger from '../../assets/messenger.png';\r\nimport pinterest from '../../assets/pinterest.png';\r\nimport reddit from '../../assets/reddit.png';\r\nimport twitter from '../../assets/twitter.png';\r\nimport whatsapp from '../../assets/whatsapp.png';\r\nimport discordhover from '../../assets/discordhovered.png';\r\nimport facebookhover from '../../assets/facebookhovered.png';\r\nimport instagramhover from '../../assets/instagramhovered.png';\r\nimport messengerhover from '../../assets/messengerhovered.png';\r\nimport pinteresthover from '../../assets/pinteresthovered.png';\r\nimport reddithover from '../../assets/reddithovered.png';\r\nimport twitterhover from '../../assets/twitterhovered.png';\r\nimport whatsapphover from '../../assets/whatsapphovered.png';\r\n\r\nfunction ListLookView({ uploadedFiles, isUpscaled, isTitleSet }) {\r\n  const serverOrigin = `${window.location.protocol}//${window.location.hostname}:3001`;\r\n\r\n  // Initialize selectedQuality state with 'upscaled' for all items\r\n  const [selectedQuality, setSelectedQuality] = useState({});\r\n  const [isZoomed, setIsZoomed] = useState(false);\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\r\n  const [hoveredIcon, setHoveredIcon] = useState('');\r\n\r\n  // Array of social media information\r\n  const socialMedia = [\r\n    { name: 'discord', src: discord, alt: discordhover },\r\n    { name: 'facebook', src: facebook, alt: facebookhover },\r\n    { name: 'instagram', src: instagram, alt: instagramhover },\r\n    { name: 'messenger', src: messenger, alt: messengerhover },\r\n    { name: 'pinterest', src: pinterest, alt: pinteresthover },\r\n    { name: 'reddit', src: reddit, alt: reddithover },\r\n    { name: 'twitter', src: twitter, alt: twitterhover },\r\n    { name: 'whatsapp', src: whatsapp, alt: whatsapphover },\r\n  ];\r\n\r\n  // Handle mouse enter and leave events\r\n  const handleMouseEnter = (index) => setIsZoomed({ ...isZoomed, [index]: true });\r\n  const handleMouseLeave = (index) => setIsZoomed({ ...isZoomed, [index]: false });\r\n\r\n  const handleMouseMove = (event, index) => {\r\n    const rect = event.target.getBoundingClientRect();\r\n    const xPercent = ((event.clientX - rect.left) / rect.width) * 100;\r\n    const yPercent = ((event.clientY - rect.top) / rect.height) * 100;\r\n  \r\n    setMousePosition({\r\n      x: xPercent,\r\n      y: yPercent\r\n    });\r\n  };\r\n\r\n  // Set the default value for selectedQuality based on the index\r\n  useEffect(() => {\r\n    const defaultQuality = 'upscaled';\r\n    const defaultSelectedQuality = {};\r\n    uploadedFiles.forEach((_, index) => {\r\n      defaultSelectedQuality[index] = defaultQuality;\r\n    });\r\n    setSelectedQuality(defaultSelectedQuality);\r\n  }, [uploadedFiles]);\r\n\r\n  // Function to handle quality choice button click\r\n  const handleQualityChoiceClick = (index, quality) => {\r\n    setSelectedQuality({ ...selectedQuality, [index]: quality });\r\n  };\r\n\r\n  const renderSocialMediaIcons = (listIndex) => (\r\n    socialMedia.map(media => (\r\n      <div key={media.name}>\r\n        <img\r\n          src={hoveredIcon === `${listIndex}-${media.name}` ? media.alt : media.src}\r\n          onMouseEnter={() => setHoveredIcon(`${listIndex}-${media.name}`)}\r\n          onMouseLeave={() => setHoveredIcon('')}\r\n          className=\"p-2.5 rounded-full shadow-md hover:shadow-lg hover:bg-indigo-100 cursor-not-allowed\"\r\n          width={50}\r\n          alt={media.name}\r\n        />\r\n      </div>\r\n    ))\r\n  );\r\n\r\n  // Function to handle the image download\r\n  const handleDownload = async (imageUrl, filename) => {\r\n    try {\r\n      const response = await fetch(imageUrl);\r\n      const blob = await response.blob();\r\n      const downloadUrl = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = downloadUrl;\r\n      link.download = filename;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(downloadUrl); // Clean up the URL object\r\n    } catch (error) {\r\n      console.error('Error downloading the image:', error);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div id=\"listLiveView\" encType=\"multipart/form-data\" className=\"w-full bg-stone-950\">\r\n      <ul id=\"listLiveView-container\" className=\"w-full h-full flex flex-col items-center justify-center gap-8 relative\">\r\n\r\n        {uploadedFiles.map((file, index) => {\r\n          let originalFilename = file.originalFilename;\r\n          let upscaledFilename = file.upscaledFilename;\r\n\r\n          const originalImageUrl = `${serverOrigin}/uploads/${file.originalFilename}`;\r\n          const upscaledImageUrl = `${serverOrigin}/upscaled/${file.upscaledFilename}`;\r\n          const isLoading = file.isLoading;\r\n\r\n          return (\r\n            <li id={`listLiveView-item${index}`} key={index} className=\"flex flex-col max-w-[1300px] mx-4 xl:mx-20 w-full h-full bg-indigo-50 py-20 px-12 rounded-md\">\r\n              {file.isLoading ? (\r\n                <div className='flex justify-around gap-20 w-full'>\r\n                  <div className=\"spinningLoader\"></div>\r\n                </div>\r\n              \r\n              ) : (\r\n                <div className='flex justify-around gap-20 w-full'>\r\n                  <div className='flex justify-around gap-10 w-[75%]'>\r\n                    <div className='flex flex-col items-center gap-5 w-full h-full'>\r\n                      <h3 className='w-full max-w-[21.25em] font-bold text-[30px]'>Original Image</h3>\r\n                      <div \r\n                        onMouseEnter={() => handleMouseEnter(index)} \r\n                        onMouseLeave={() => handleMouseLeave(index)} \r\n                        onMouseMove={(event) => handleMouseMove(event, index)}\r\n                        className={`overflow-hidden h-full ${isZoomed[index] ? 'zoomed' : ''}`}\r\n                      >\r\n                        <img \r\n                          src={originalImageUrl} \r\n                          alt={originalFilename} \r\n                          className=\"object-cover w-full h-full\" \r\n                          style={{\r\n                            transform: isZoomed[index] ? `scale(4)` : 'none',\r\n                            transformOrigin: `${mousePosition.x}% ${mousePosition.y}%`\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='flex flex-col items-center gap-5 w-full h-full'>\r\n                      <h3 className='w-full max-w-[21.25em] font-bold text-[30px]'>Upscaled Image</h3>\r\n                      <div \r\n                        onMouseEnter={() => handleMouseEnter(index)} \r\n                        onMouseLeave={() => handleMouseLeave(index)} \r\n                        onMouseMove={(event) => handleMouseMove(event, index)}\r\n                        className={`overflow-hidden h-full ${isZoomed[index] ? 'zoomed' : ''}`}\r\n                      >\r\n                        <img \r\n                          src={upscaledImageUrl} \r\n                          alt={upscaledFilename} \r\n                          className=\"object-cover w-full h-full\" \r\n                          style={{\r\n                            transform: isZoomed[index] ? `scale(4)` : 'none',\r\n                            transformOrigin: `${mousePosition.x}% ${mousePosition.y}%`\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  \r\n                  <div className='w-[25%] flex flex-col justify-around items-center gap-8'>\r\n                    <div className='flex justify-center w-full mx-4 md:mx-20 gap-5'>\r\n                      <h4\r\n                        className={`flex justify-center items-center hover:shadow-lg shadow-md py-2 px-6 rounded-3xl font-semibold text-[20px] text-white bg-indigo-300 hover:bg-indigo-400 transition-all duration-200 ease-in-out ${selectedQuality[index] === 'original' ? 'bg-indigo-600 hover:bg-indigo-600 cursor-default' : 'cursor-pointer'}`}\r\n                        onClick={() => handleQualityChoiceClick(index, 'original')}\r\n                      >\r\n                        Original\r\n                      </h4>\r\n                      <h4\r\n                        className={`flex justify-center items-center hover:shadow-lg shadow-md py-2 px-6 rounded-3xl font-semibold text-[20px] text-white bg-indigo-300 hover:bg-indigo-400 transition-all duration-200 ease-in-out ${selectedQuality[index] === 'upscaled' ? 'bg-indigo-600 hover:bg-indigo-600 cursor-default' : 'cursor-pointer'}`}\r\n                        onClick={() => handleQualityChoiceClick(index, 'upscaled')}\r\n                      >\r\n                        Upscaled\r\n                      </h4>\r\n                    </div>\r\n                    <div className='flex flex-col items-center w-full gap-2'>\r\n                      <p className='px-6 py-2 bg-indigo-300 ring-[2.5px] ring-indigo-500 font-semibold text-indigo-600 rounded-lg hover:bg-indigo-600 hover:text-stone-200 hover:ring-indigo-600 transition-all duration-200 ease-in-out cursor-pointer w-full text-center'\r\n                        onClick={() => handleDownload(\r\n                          selectedQuality[index] === 'original' ? originalImageUrl : upscaledImageUrl,\r\n                          selectedQuality[index] === 'original' ? originalFilename : upscaledFilename\r\n                        )}\r\n                      >\r\n                        Download\r\n                      </p>\r\n                      <p>{selectedQuality[index] === 'original' ? `${file.originalWidth} x ${file.originalHeight}` : `${file.upscaledWidth} x ${file.upscaledHeight}`}</p>\r\n                    </div>\r\n                    <div className='flex flex-wrap justify-between gap-x-4 gap-y-4'>\r\n                      {renderSocialMediaIcons(index)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListLookView;\r\n","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleImageSlider.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleInformationalPieces.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleFAQ.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleBlog.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleLetter.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleVideoSlider.jsx",["139"],[],"import React, { useRef, useState, useEffect } from 'react'\r\n\r\nconst UpscaleVideoSlider = () => {\r\n\r\n  const [selected, setSelected] = useState(\"Marketing\");\r\n  const [videoItems, setVideoItems] = useState([\r\n    ...[\"Marketing\", \"Photography\", \"E-Commerce\", \"Developers\", \"Enterprise\", \"Individuals\", \"Professional\", \"Real Estate\", \"Media\", \"Car Dealership\"],\r\n    ...[\"Marketing\", \"Photography\", \"E-Commerce\", \"Developers\", \"Enterprise\", \"Individuals\", \"Professional\", \"Real Estate\", \"Media\", \"Car Dealership\"]\r\n  ]);\r\n  \r\n  // Ref to track the slider container\r\n  const sliderVideoRef = useRef(null);\r\n  \r\n  const handleSelect = (item) => {\r\n    setSelected(item);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if (selected !== null && sliderVideoRef.current) {\r\n      const slider = sliderVideoRef.current;\r\n      const selectedElement = slider.querySelector(`[data-item=\"${selected}\"]`);\r\n  \r\n      if (selectedElement) {\r\n        // Calculate the position to scroll to\r\n        const scrollPosition = selectedElement.offsetLeft - slider.offsetLeft;\r\n  \r\n        slider.scrollTo({\r\n          left: scrollPosition,\r\n          behavior: 'smooth'\r\n        });\r\n      }\r\n    }\r\n  }, [selected]);\r\n\r\n  return (\r\n    <div id=\"upscaleHome_videoSlider\" className=\"flex flex-col items-center bg-stone-950 md:pb-28 px-4\">\r\n            \r\n        <div id=\"upscaleHome_videoSlider-header\" className=\"flex flex-col w-full items-center\">\r\n            \r\n            <h3 className=\"font-bold text-[44px] text-white\">Not Just Any Other Background Removal Tool</h3>\r\n            <p className=\"font-bold text-[20px] text-white\">Get precise and quick image transformations regardless of what industry you belong to!</p>\r\n            \r\n        </div>\r\n        \r\n        <div id=\"upscaleHome_videoSlider-selectSlider\" className=\"flex overflow-x-auto gap-28 max-w-[90vw] lg:max-w-[70vw] hide-scrollbar text-white my-16 border-b-[1px] border-gray-500\" ref={sliderVideoRef}>\r\n        {videoItems.map((item, index) => (\r\n            <p\r\n            key={index}\r\n            data-item={item}\r\n            onClick={() => handleSelect(item)}\r\n            className={`cursor-pointer py-2 my-0 min-w-[140px] ${selected === item ? 'border-b-8 border-purple-500 font-bold' : ''}`}\r\n            >\r\n            {item}\r\n            </p>\r\n        ))}\r\n        </div>\r\n        \r\n        <div id=\"upscaleHome_videoSlider-imageSlider\">\r\n            \r\n            <img src=\"https://i.gyazo.com/d543dca3226cd06b09de7e9c6b93b7e8.png\" alt=\"\" />\r\n            \r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UpscaleVideoSlider\r\n","C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleHomeHero.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleInput.jsx",["140","141","142","143","144","145","146"],[],"import React, { useRef, useState, useEffect } from 'react';\r\n\r\nfunction UpscaleInput({ onUploadClicked }) {\r\n    const dropzoneRef = useRef(null);\r\n    const fileInputRef = useRef(null);\r\n    const fileListRef = useRef(null);\r\n    \r\n    const [uploadedFiles, setUploadedFiles] = useState([]);\r\n    const [isUploadClicked, setIsUploadClicked] = useState(false);\r\n    const [isFileAdded, setIsFileAdded] = useState(false);\r\n    \r\n    const [editedFiles, setEditedFiles] = useState([]);\r\n    const [isFolderUploaded, setIsFolderUploaded] = useState(false);\r\n\r\n    \r\n    \r\n    const serverOrigin = `${window.location.protocol}//${window.location.hostname}:3001`;\r\n    \r\n    useEffect(() => {\r\n        const initialEditedFiles = uploadedFiles.map(file => ({\r\n        ...file,\r\n        editedTitle: file.generatedFilename,\r\n        editedKeywords: file.keywords\r\n        }));\r\n        setEditedFiles(initialEditedFiles);\r\n    }, [uploadedFiles]);\r\n\r\n    useEffect(() => {\r\n        if (uploadedFiles.length > 0) {\r\n            onUploadClicked(uploadedFiles);\r\n        }\r\n    }, [uploadedFiles, onUploadClicked]);  \r\n    \r\n    useEffect(() => {\r\n        const handleDragEnter = (e) => {\r\n            e.preventDefault();\r\n            if (!isUploadClicked) {\r\n                dropzoneRef.current.classList.add('border-green-600');\r\n            }\r\n        };\r\n    \r\n        const handleDragOver = (e) => {\r\n            e.preventDefault();\r\n            if (!isUploadClicked) {\r\n                dropzoneRef.current.classList.add('border-green-600');\r\n            }\r\n        };\r\n    \r\n        const handleDragLeave = () => {\r\n            if (!isUploadClicked) {\r\n                dropzoneRef.current.classList.remove('border-green-600');\r\n            }\r\n        };\r\n    \r\n        const handleDrop = (e) => {\r\n            e.preventDefault();\r\n            if (!isUploadClicked) {\r\n                dropzoneRef.current.classList.remove('border-green-600');\r\n            }\r\n            handleFiles(e.dataTransfer.files);\r\n        };\r\n    \r\n        const handleChange = (e) => {\r\n            handleFiles(e.target.files);\r\n        };\r\n    \r\n    \r\n        const dropzone = dropzoneRef.current;\r\n    \r\n    \r\n        dropzone.addEventListener('dragenter', handleDragEnter);\r\n        dropzone.addEventListener('dragover', handleDragOver);\r\n        dropzone.addEventListener('dragleave', handleDragLeave);\r\n        dropzone.addEventListener('drop', handleDrop);\r\n        fileInputRef.current.addEventListener('change', handleChange);\r\n    \r\n        return () => {\r\n            dropzone.removeEventListener('dragenter', handleDragEnter);\r\n            dropzone.removeEventListener('dragover', handleDragOver);\r\n            dropzone.removeEventListener('dragleave', handleDragLeave);\r\n            dropzone.removeEventListener('drop', handleDrop);\r\n            fileInputRef.current.removeEventListener('change', handleChange);\r\n        };\r\n    }, [isUploadClicked, dropzoneRef, fileInputRef]);\r\n    \r\n    const handleFiles = (files) => {\r\n        if (fileListRef.current) {\r\n            fileListRef.current.innerHTML = '';\r\n            let totalSize = 0;\r\n            let isFolder = false;\r\n        \r\n            for (const file of files) {\r\n                totalSize += file.size;\r\n                if (file.webkitRelativePath) { // this property is usually present for files in a folder\r\n                    isFolder = true;\r\n                }\r\n            }\r\n        \r\n            setIsFolderUploaded(isFolder);\r\n        \r\n            if (isFolder) {\r\n                const folderName = files[0].webkitRelativePath.split('/')[0]; // Gets the folder name\r\n                fileListRef.current.textContent = `${folderName} (${formatBytes(totalSize)})`;\r\n            } else {\r\n                for (const file of files) {\r\n                    const listItem = document.createElement('div');\r\n                    const maxNameLength = 33;\r\n                    let truncatedName = file.name.length > maxNameLength ? file.name.substring(0, maxNameLength) + '...' : file.name;\r\n                    listItem.textContent = `${truncatedName} (${formatBytes(file.size)})`;\r\n                    fileListRef.current.appendChild(listItem);\r\n                }\r\n            }\r\n        \r\n            setIsFileAdded(files.length > 0);\r\n        }\r\n    };\r\n    \r\n    const formatBytes = (bytes) => {\r\n        if (bytes === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    };\r\n    \r\n\r\n  return (\r\n    <div className={`flex lg:flex-row flex-col w-full transition-container $justify-start lg:max-w-[650px]`}>\r\n            \r\n        <div className={`image-input h-full w-full lg:max-h-[600px] rounded-lg shadow-lg`}>\r\n\r\n            {/* DROP ZONE */}\r\n            <div\r\n                ref={dropzoneRef}\r\n                className={`bg-stone-900 px-8 py-16 text-center rounded-lg border-dashed border-2 hover:border-indigo-400 transition duration-300 ease-in-out transform hover:shadow-lg group ${isFileAdded ? 'border-indigo-400' : 'border-indigo-200'}`}\r\n            >\r\n                <label htmlFor=\"fileInput\" className=\"cursor-pointer flex flex-col items-center space-y-2\">\r\n                    <svg className=\"w-16 h-16 text-indigo-200 group-hover:text-indigo-400 transition duration-300 ease-in-out transform\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\r\n                    </svg>\r\n                    <span className=\"text-indigo-200 \">Drag and drop your files here</span>\r\n                    <span className=\"text-indigo-200 text-sm\">(or click to select)</span>\r\n                </label>\r\n                <input id=\"fileInput\" ref={fileInputRef} type=\"file\" className=\"hidden file-list\" name=\"folderUpload\" webkitdirectory=\"true\" directory=\"true\" multiple />\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpscaleInput;",["147"],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-upload\\UpscaleSharePopup.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\global\\ComingSoon.jsx",[],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleHeroItem.jsx",["148"],[],"C:\\Users\\dsafr\\Documents\\Dev\\AutoKeyworder\\src\\components\\upscale-home\\UpscaleImageSlide.jsx",[],[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":1,"column":27,"nodeType":"153","messageId":"154","endLine":1,"endColumn":36},{"ruleId":"149","replacedBy":"155"},{"ruleId":"151","severity":1,"message":"156","line":2,"column":8,"nodeType":"153","messageId":"154","endLine":2,"endColumn":18},{"ruleId":"151","severity":1,"message":"157","line":15,"column":12,"nodeType":"153","messageId":"154","endLine":15,"endColumn":25},{"ruleId":"151","severity":1,"message":"158","line":16,"column":12,"nodeType":"153","messageId":"154","endLine":16,"endColumn":22},{"ruleId":"151","severity":1,"message":"159","line":17,"column":12,"nodeType":"153","messageId":"154","endLine":17,"endColumn":24},{"ruleId":"151","severity":1,"message":"160","line":18,"column":29,"nodeType":"153","messageId":"154","endLine":18,"endColumn":47},{"ruleId":"151","severity":1,"message":"161","line":19,"column":25,"nodeType":"153","messageId":"154","endLine":19,"endColumn":39},{"ruleId":"151","severity":1,"message":"162","line":21,"column":12,"nodeType":"153","messageId":"154","endLine":21,"endColumn":28},{"ruleId":"163","severity":1,"message":"164","line":115,"column":26,"nodeType":"153","endLine":115,"endColumn":33},{"ruleId":"163","severity":1,"message":"165","line":117,"column":8,"nodeType":"166","endLine":117,"endColumn":52,"suggestions":"167"},{"ruleId":"151","severity":1,"message":"168","line":160,"column":17,"nodeType":"153","messageId":"154","endLine":160,"endColumn":27},{"ruleId":"151","severity":1,"message":"169","line":113,"column":17,"nodeType":"153","messageId":"154","endLine":113,"endColumn":26},{"ruleId":"151","severity":1,"message":"170","line":6,"column":22,"nodeType":"153","messageId":"154","endLine":6,"endColumn":35},{"ruleId":"151","severity":1,"message":"171","line":8,"column":27,"nodeType":"153","messageId":"154","endLine":8,"endColumn":43},{"ruleId":"151","severity":1,"message":"160","line":9,"column":29,"nodeType":"153","messageId":"154","endLine":9,"endColumn":47},{"ruleId":"151","severity":1,"message":"172","line":12,"column":12,"nodeType":"153","messageId":"154","endLine":12,"endColumn":23},{"ruleId":"151","severity":1,"message":"162","line":13,"column":12,"nodeType":"153","messageId":"154","endLine":13,"endColumn":28},{"ruleId":"151","severity":1,"message":"173","line":17,"column":11,"nodeType":"153","messageId":"154","endLine":17,"endColumn":23},{"ruleId":"163","severity":1,"message":"164","line":82,"column":26,"nodeType":"153","endLine":82,"endColumn":33},{"ruleId":"163","severity":1,"message":"174","line":84,"column":8,"nodeType":"166","endLine":84,"endColumn":52,"suggestions":"175"},{"ruleId":"149","replacedBy":"176"},{"ruleId":"151","severity":1,"message":"152","line":1,"column":27,"nodeType":"153","messageId":"154","endLine":1,"endColumn":36},"no-new-object",["177"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["177"],"'uploadIcon' is defined but never used.","'uploadedFiles' is assigned a value but never used.","'isUpscaled' is assigned a value but never used.","'isQualitySet' is assigned a value but never used.","'setIsUploadClicked' is assigned a value but never used.","'setIsFileAdded' is assigned a value but never used.","'isFolderUploaded' is assigned a value but never used.","react-hooks/exhaustive-deps","The ref value 'fileInputRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'fileInputRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'handleSubmit', 'onUploadClicked', and 'processDirectory'. Either include them or remove the dependency array. If 'onUploadClicked' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["178"],"'folderName' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setVideoItems' is assigned a value but never used.","'setUploadedFiles' is assigned a value but never used.","'editedFiles' is assigned a value but never used.","'serverOrigin' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleFiles'. Either include it or remove the dependency array.",["179"],["177"],"no-object-constructor",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [isUploadClicked, dropzoneRef, fileInputRef, onUploadClicked, handleSubmit, processDirectory]",{"range":"184","text":"185"},"Update the dependencies array to be: [isUploadClicked, dropzoneRef, fileInputRef, handleFiles]",{"range":"186","text":"187"},[4715,4759],"[isUploadClicked, dropzoneRef, fileInputRef, onUploadClicked, handleSubmit, processDirectory]",[2916,2960],"[isUploadClicked, dropzoneRef, fileInputRef, handleFiles]"]