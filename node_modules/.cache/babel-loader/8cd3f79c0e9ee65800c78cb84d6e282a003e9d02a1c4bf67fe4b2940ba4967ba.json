{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dsafr\\\\Documents\\\\Dev\\\\AutoKeyworder\\\\src\\\\components\\\\upload\\\\UpscaleImageInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport uploadIcon from '../../assets/upload-icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdateImageInput({\n  onUploadClicked\n}) {\n  _s();\n  const dropzoneRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const fileListRef = useRef(null);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [isUpscaled, setIsUpscaled] = useState(false);\n  const [isQualitySet, setIsQualitySet] = useState(false);\n  const [isUploadClicked, setIsUploadClicked] = useState(false);\n  const [isFileAdded, setIsFileAdded] = useState(false);\n\n  // Server origin based on the current window location\n  const serverOrigin = `${window.location.protocol}//${window.location.hostname}:3001`;\n\n  // Effect hook to handle drag and drop events\n  useEffect(() => {\n    const handleDragEnter = e => {\n      e.preventDefault();\n      if (!isUploadClicked) {\n        dropzoneRef.current.classList.add('border-green-600');\n      }\n    };\n    const handleDragOver = e => {\n      e.preventDefault();\n      if (!isUploadClicked) {\n        dropzoneRef.current.classList.add('border-green-600');\n      }\n    };\n    const handleDragLeave = () => {\n      if (!isUploadClicked) {\n        dropzoneRef.current.classList.remove('border-green-600');\n      }\n    };\n    const handleDrop = e => {\n      e.preventDefault();\n      if (!isUploadClicked) {\n        dropzoneRef.current.classList.remove('border-green-600');\n      }\n      handleFiles(e.dataTransfer.files);\n    };\n    const handleChange = e => {\n      handleFiles(e.target.files);\n    };\n    const dropzone = dropzoneRef.current;\n\n    // Event listeners for drag and drop\n    dropzone.addEventListener('dragenter', handleDragEnter);\n    dropzone.addEventListener('dragover', handleDragOver);\n    dropzone.addEventListener('dragleave', handleDragLeave);\n    dropzone.addEventListener('drop', handleDrop);\n    fileInputRef.current.addEventListener('change', handleChange);\n\n    // Cleanup: remove event listeners\n    return () => {\n      dropzone.removeEventListener('dragenter', handleDragEnter);\n      dropzone.removeEventListener('dragover', handleDragOver);\n      dropzone.removeEventListener('dragleave', handleDragLeave);\n      dropzone.removeEventListener('drop', handleDrop);\n      fileInputRef.current.removeEventListener('change', handleChange);\n    };\n  }, [isUploadClicked, dropzoneRef, fileInputRef]);\n\n  // Function to handle uploaded files\n  const handleFiles = async files => {\n    fileListRef.current.innerHTML = '';\n    let totalSize = 0;\n    let isFolder = false;\n\n    // Check if any of the files represent a folder\n    for (const file of files) {\n      totalSize += file.size;\n      if (file.webkitRelativePath) {\n        isFolder = true;\n      }\n    }\n\n    // Set state based on whether a folder is uploaded\n    setIsFolderUploaded(isFolder);\n    if (isFolder) {\n      // Display folder name and total size\n      const folderName = files[0].webkitRelativePath.split('/')[0];\n      fileListRef.current.textContent = `${folderName} (${formatBytes(totalSize)})`;\n    } else {\n      // Display each file name and size\n      for (const file of files) {\n        const listItem = document.createElement('div');\n        const maxNameLength = 33;\n        let truncatedName = file.name.length > maxNameLength ? file.name.substring(0, maxNameLength) + '...' : file.name;\n        listItem.textContent = `${truncatedName} (${formatBytes(file.size)})`;\n        fileListRef.current.appendChild(listItem);\n      }\n    }\n\n    // Set state to indicate whether files are added\n    setIsFileAdded(files.length > 0);\n\n    // Automatically send files to the server for processing\n    const formData = new FormData();\n    for (const file of files) {\n      formData.append('files', file);\n    }\n    try {\n      // Send a POST request to the server\n      const response = await fetch(`${serverOrigin}/processFiles`, {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        console.log('Files processed successfully');\n        // Parse and set the processed data\n        const processedData = await response.json();\n        setUploadedFiles(processedData);\n\n        // Trigger the processing without user interaction\n        processUploadedFiles();\n      } else {\n        console.error('Failed to process files');\n        // Handle error UI feedback\n      }\n    } catch (error) {\n      console.error('Error processing files:', error);\n      // Handle error UI feedback\n    }\n  };\n\n  // Function to format bytes into readable size\n  const formatBytes = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // Create FormData from the form\n    const formData = new FormData(event.target);\n\n    // Set isUpscaled and isQualitySet based on checkbox values\n    const upscaleImages = 'true';\n    setIsUpscaled(upscaleImages);\n    const qualitySet = 'true';\n    setIsQualitySet(qualitySet);\n    try {\n      // Send a POST request to upload files\n      const response = await fetch('http://localhost:3001/uploads', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        console.log('Folder uploaded successfully');\n        // Get the response body\n        const text = await response.text();\n        console.log(\"Server Response:\", text);\n\n        // Fetch updated photoList.json\n        const photoListResponse = await fetch('http://localhost:3001/photoList');\n        const newPhotoList = await photoListResponse.json();\n        setUploadedFiles(newPhotoList);\n\n        // Trigger the callback function with uploaded data and settings\n        onUploadClicked(newPhotoList, upscaleImages, qualitySet);\n      }\n    } catch (error) {\n      console.error('There was a problem with the upload:', error);\n    }\n  };\n\n  // Function to process uploaded files\n  const processUploadedFiles = async () => {\n    try {\n      // Send a GET request to fetch updated data after processing\n      const response = await fetch('http://localhost:3001/photoList');\n      const newPhotoList = await response.json();\n      setUploadedFiles(newPhotoList);\n\n      // Trigger the callback function with updated data\n      onUploadClicked(newPhotoList, isUpscaled, isQualitySet);\n    } catch (error) {\n      console.error('Error fetching updated data:', error);\n      // Handle error UI feedback\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex lg:flex-row flex-col w-full transition-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-input h-full w-full lg:max-w-[600px] lg:max-h-[600px] pt-5 pb-7 px-10 bg-white rounded-lg shadow-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"folderUpload-formBody\",\n        onSubmit: handleSubmit,\n        encType: \"multipart/form-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: dropzoneRef,\n          className: `bg-stone-900 px-8 py-16 text-center rounded-lg border-dashed border-2 hover:border-indigo-400 transition duration-300 ease-in-out transform hover:shadow-lg group ${isFileAdded ? 'border-indigo-400' : 'border-indigo-200'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fileInput\",\n            className: \"cursor-pointer flex flex-col items-center space-y-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              className: \"w-16 h-16 text-indigo-200 group-hover:text-indigo-400 transition duration-300 ease-in-out transform\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: \"2\",\n                d: \"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-indigo-200 \",\n              children: \"Drag and drop your files here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-indigo-200 text-sm\",\n              children: \"(or click to select)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"fileInput\",\n            ref: fileInputRef,\n            type: \"file\",\n            className: \"hidden file-list\",\n            name: \"folderUpload\",\n            webkitdirectory: \"true\",\n            directory: \"true\",\n            multiple: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col w-full items-center gap-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center w-full text-slate-400 ring-slate-200 ring-2 py-1.5 h-[36px]\",\n            ref: fileListRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col w-full justify-around gap-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"folderUpload-submitButton\",\n            className: \"relative mx-auto h-10 w-full flex justify-center items-center group transition-opacity duration-300 ease-in-out\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"folderUpload-submitButton\",\n              type: \"submit\",\n              className: \"bg-green-300 py-2 h-10 w-full items-center rounded-sm shadow-lg hover:shadow-xl cursor-pointer absolute overflow-hidden transform transition duration-300 ease-in-out\",\n              disabled: !isFileAdded\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-center pl-3 pr-1 mr-2 text-green-700 font-bold z-10 pointer-events-none transition-transform duration-200 ease-in-out group-hover:-translate-x-4 h-full flex items-center ml-9 bg-green-300\",\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: uploadIcon,\n              alt: \"Upload Icon\",\n              className: \"cursor-pointer h-full max-h-[26px] transition duration-300 ease-in-out -translate-x-10 opacity-20 group-hover:opacity-80 group-hover:-translate-x-3 w-[28px]\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this);\n}\n_s(UpdateImageInput, \"EzJsdZN1llGTu4hJKRTixcMMOi0=\");\n_c = UpdateImageInput;\n;\nexport default UpdateImageInput;\nvar _c;\n$RefreshReg$(_c, \"UpdateImageInput\");","map":{"version":3,"names":["React","useRef","useState","useEffect","uploadIcon","jsxDEV","_jsxDEV","UpdateImageInput","onUploadClicked","_s","dropzoneRef","fileInputRef","fileListRef","uploadedFiles","setUploadedFiles","isUpscaled","setIsUpscaled","isQualitySet","setIsQualitySet","isUploadClicked","setIsUploadClicked","isFileAdded","setIsFileAdded","serverOrigin","window","location","protocol","hostname","handleDragEnter","e","preventDefault","current","classList","add","handleDragOver","handleDragLeave","remove","handleDrop","handleFiles","dataTransfer","files","handleChange","target","dropzone","addEventListener","removeEventListener","innerHTML","totalSize","isFolder","file","size","webkitRelativePath","setIsFolderUploaded","folderName","split","textContent","formatBytes","listItem","document","createElement","maxNameLength","truncatedName","name","length","substring","appendChild","formData","FormData","append","response","fetch","method","body","ok","console","log","processedData","json","processUploadedFiles","error","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed","handleSubmit","event","upscaleImages","qualitySet","text","photoListResponse","newPhotoList","className","children","id","onSubmit","encType","ref","htmlFor","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","fileName","_jsxFileName","lineNumber","columnNumber","type","webkitdirectory","directory","multiple","disabled","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/dsafr/Documents/Dev/AutoKeyworder/src/components/upload/UpscaleImageInput.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport uploadIcon from '../../assets/upload-icon.png';\r\n\r\nfunction UpdateImageInput({ onUploadClicked }) {\r\n    const dropzoneRef = useRef(null);\r\n    const fileInputRef = useRef(null);\r\n    const fileListRef = useRef(null);\r\n\r\n    const [uploadedFiles, setUploadedFiles] = useState([]);\r\n    const [isUpscaled, setIsUpscaled] = useState(false);\r\n    const [isQualitySet, setIsQualitySet] = useState(false);\r\n    const [isUploadClicked, setIsUploadClicked] = useState(false);\r\n    const [isFileAdded, setIsFileAdded] = useState(false);\r\n\r\n    // Server origin based on the current window location\r\n    const serverOrigin = `${window.location.protocol}//${window.location.hostname}:3001`;\r\n\r\n    // Effect hook to handle drag and drop events\r\n    useEffect(() => {\r\n        const handleDragEnter = (e) => {\r\n            e.preventDefault();\r\n            if (!isUploadClicked) {\r\n                dropzoneRef.current.classList.add('border-green-600');\r\n            }\r\n        };\r\n\r\n        const handleDragOver = (e) => {\r\n            e.preventDefault();\r\n            if (!isUploadClicked) {\r\n                dropzoneRef.current.classList.add('border-green-600');\r\n            }\r\n        };\r\n\r\n        const handleDragLeave = () => {\r\n            if (!isUploadClicked) {\r\n                dropzoneRef.current.classList.remove('border-green-600');\r\n            }\r\n        };\r\n\r\n        const handleDrop = (e) => {\r\n            e.preventDefault();\r\n            if (!isUploadClicked) {\r\n                dropzoneRef.current.classList.remove('border-green-600');\r\n            }\r\n            handleFiles(e.dataTransfer.files);\r\n        };\r\n\r\n        const handleChange = (e) => {\r\n            handleFiles(e.target.files);\r\n        };\r\n\r\n        const dropzone = dropzoneRef.current;\r\n\r\n        // Event listeners for drag and drop\r\n        dropzone.addEventListener('dragenter', handleDragEnter);\r\n        dropzone.addEventListener('dragover', handleDragOver);\r\n        dropzone.addEventListener('dragleave', handleDragLeave);\r\n        dropzone.addEventListener('drop', handleDrop);\r\n        fileInputRef.current.addEventListener('change', handleChange);\r\n\r\n        // Cleanup: remove event listeners\r\n        return () => {\r\n            dropzone.removeEventListener('dragenter', handleDragEnter);\r\n            dropzone.removeEventListener('dragover', handleDragOver);\r\n            dropzone.removeEventListener('dragleave', handleDragLeave);\r\n            dropzone.removeEventListener('drop', handleDrop);\r\n            fileInputRef.current.removeEventListener('change', handleChange);\r\n        };\r\n    }, [isUploadClicked, dropzoneRef, fileInputRef]);\r\n\r\n    // Function to handle uploaded files\r\n    const handleFiles = async (files) => {\r\n        fileListRef.current.innerHTML = '';\r\n        let totalSize = 0;\r\n        let isFolder = false;\r\n\r\n        // Check if any of the files represent a folder\r\n        for (const file of files) {\r\n            totalSize += file.size;\r\n            if (file.webkitRelativePath) {\r\n                isFolder = true;\r\n            }\r\n        }\r\n\r\n        // Set state based on whether a folder is uploaded\r\n        setIsFolderUploaded(isFolder);\r\n\r\n        if (isFolder) {\r\n            // Display folder name and total size\r\n            const folderName = files[0].webkitRelativePath.split('/')[0];\r\n            fileListRef.current.textContent = `${folderName} (${formatBytes(totalSize)})`;\r\n        } else {\r\n            // Display each file name and size\r\n            for (const file of files) {\r\n                const listItem = document.createElement('div');\r\n                const maxNameLength = 33;\r\n                let truncatedName =\r\n                    file.name.length > maxNameLength ? file.name.substring(0, maxNameLength) + '...' : file.name;\r\n                listItem.textContent = `${truncatedName} (${formatBytes(file.size)})`;\r\n                fileListRef.current.appendChild(listItem);\r\n            }\r\n        }\r\n\r\n        // Set state to indicate whether files are added\r\n        setIsFileAdded(files.length > 0);\r\n\r\n        // Automatically send files to the server for processing\r\n        const formData = new FormData();\r\n        for (const file of files) {\r\n            formData.append('files', file);\r\n        }\r\n\r\n        try {\r\n            // Send a POST request to the server\r\n            const response = await fetch(`${serverOrigin}/processFiles`, {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log('Files processed successfully');\r\n                // Parse and set the processed data\r\n                const processedData = await response.json();\r\n                setUploadedFiles(processedData);\r\n\r\n                // Trigger the processing without user interaction\r\n                processUploadedFiles();\r\n            } else {\r\n                console.error('Failed to process files');\r\n                // Handle error UI feedback\r\n            }\r\n        } catch (error) {\r\n            console.error('Error processing files:', error);\r\n            // Handle error UI feedback\r\n        }\r\n    };\r\n\r\n    // Function to format bytes into readable size\r\n    const formatBytes = (bytes) => {\r\n        if (bytes === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    };\r\n\r\n    // Function to handle form submission\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Create FormData from the form\r\n        const formData = new FormData(event.target);\r\n\r\n        // Set isUpscaled and isQualitySet based on checkbox values\r\n        const upscaleImages = 'true';\r\n        setIsUpscaled(upscaleImages);\r\n        const qualitySet = 'true';\r\n        setIsQualitySet(qualitySet);\r\n\r\n        try {\r\n            // Send a POST request to upload files\r\n            const response = await fetch('http://localhost:3001/uploads', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log('Folder uploaded successfully');\r\n                // Get the response body\r\n                const text = await response.text();\r\n                console.log(\"Server Response:\", text);\r\n\r\n                // Fetch updated photoList.json\r\n                const photoListResponse = await fetch('http://localhost:3001/photoList');\r\n                const newPhotoList = await photoListResponse.json();\r\n                setUploadedFiles(newPhotoList);\r\n\r\n                // Trigger the callback function with uploaded data and settings\r\n                onUploadClicked(newPhotoList, upscaleImages, qualitySet);\r\n            }\r\n        } catch (error) {\r\n            console.error('There was a problem with the upload:', error);\r\n        }\r\n    };\r\n\r\n    // Function to process uploaded files\r\n    const processUploadedFiles = async () => {\r\n        try {\r\n            // Send a GET request to fetch updated data after processing\r\n            const response = await fetch('http://localhost:3001/photoList');\r\n            const newPhotoList = await response.json();\r\n            setUploadedFiles(newPhotoList);\r\n\r\n            // Trigger the callback function with updated data\r\n            onUploadClicked(newPhotoList, isUpscaled, isQualitySet);\r\n        } catch (error) {\r\n            console.error('Error fetching updated data:', error);\r\n            // Handle error UI feedback\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex lg:flex-row flex-col w-full transition-container\">\r\n            <div className=\"image-input h-full w-full lg:max-w-[600px] lg:max-h-[600px] pt-5 pb-7 px-10 bg-white rounded-lg shadow-lg\">\r\n\r\n                <form id=\"folderUpload-formBody\" onSubmit={handleSubmit} encType=\"multipart/form-data\">\r\n\r\n                    {/* DROP ZONE */}\r\n                    <div\r\n                        ref={dropzoneRef}\r\n                        className={`bg-stone-900 px-8 py-16 text-center rounded-lg border-dashed border-2 hover:border-indigo-400 transition duration-300 ease-in-out transform hover:shadow-lg group ${isFileAdded ? 'border-indigo-400' : 'border-indigo-200'}`}\r\n                    >\r\n                        <label htmlFor=\"fileInput\" className=\"cursor-pointer flex flex-col items-center space-y-2\">\r\n                            <svg className=\"w-16 h-16 text-indigo-200 group-hover:text-indigo-400 transition duration-300 ease-in-out transform\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\r\n                            </svg>\r\n                            <span className=\"text-indigo-200 \">Drag and drop your files here</span>\r\n                            <span className=\"text-indigo-200 text-sm\">(or click to select)</span>\r\n                        </label>\r\n                        <input id=\"fileInput\" ref={fileInputRef} type=\"file\" className=\"hidden file-list\" name=\"folderUpload\" webkitdirectory=\"true\" directory=\"true\" multiple />\r\n                    </div>\r\n                    \r\n                    {/* REFERENCE BOX */}\r\n                    <div className=\"flex flex-col w-full items-center gap-3\">\r\n                        <div className=\"text-center w-full text-slate-400 ring-slate-200 ring-2 py-1.5 h-[36px]\" ref={fileListRef}></div>                    \r\n                    </div>\r\n\r\n                    {/* OPTION BUTTONS */}\r\n                    <div className=\"flex flex-col w-full justify-around gap-3\">\r\n                        \r\n                        {/* UPLOAD BUTTON */}\r\n                        <div id=\"folderUpload-submitButton\" className=\"relative mx-auto h-10 w-full flex justify-center items-center group transition-opacity duration-300 ease-in-out\">\r\n                            <input id=\"folderUpload-submitButton\" type=\"submit\" className=\"bg-green-300 py-2 h-10 w-full items-center rounded-sm shadow-lg hover:shadow-xl cursor-pointer absolute overflow-hidden transform transition duration-300 ease-in-out\" disabled={!isFileAdded} />\r\n                            <p className=\"text-center pl-3 pr-1 mr-2 text-green-700 font-bold z-10 pointer-events-none transition-transform duration-200 ease-in-out group-hover:-translate-x-4 h-full flex items-center ml-9 bg-green-300\">Upload</p>\r\n                            <img src={uploadIcon} alt=\"Upload Icon\" className=\"cursor-pointer h-full max-h-[26px] transition duration-300 ease-in-out -translate-x-10 opacity-20 group-hover:opacity-80 group-hover:-translate-x-3 w-[28px]\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateImageInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}