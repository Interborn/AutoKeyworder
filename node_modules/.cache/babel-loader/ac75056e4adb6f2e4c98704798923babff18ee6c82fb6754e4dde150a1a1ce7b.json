{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dsafr\\\\Documents\\\\Dev\\\\AutoKeyworder\\\\src\\\\components\\\\upload\\\\UpscaleImageInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport uploadIcon from '../../assets/upload-icon.png';\n\n/**\r\n * Component for updating image input with drag and drop functionality.\r\n * @param {Function} onUploadClicked - Callback function triggered on upload.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdateImageInput({\n  onUploadClicked\n}) {\n  _s();\n  // Refs for DOM elements\n  const dropzoneRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const fileListRef = useRef(null);\n\n  // State variables\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [isUpscaled, setIsUpscaled] = useState(false);\n  const [isQualitySet, setIsQualitySet] = useState(false);\n  const [isUploadClicked, setIsUploadClicked] = useState(false);\n  const [isFileAdded, setIsFileAdded] = useState(false);\n  const [isFolderUploaded, setIsFolderUploaded] = useState(false);\n  const [serverOrigin, setServerOrigin] = useState('');\n\n  // Server endpoint for file upload\n  const serverEndpoint = 'http://localhost:3001/upload';\n\n  // Process and upload files\n  const processFiles = async files => {\n    const formData = new FormData();\n    for (const file of files) {\n      formData.append('files', file); // 'files' is the field name\n    }\n\n    try {\n      const response = await fetch(serverEndpoint, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Server responded with an error!');\n      }\n      const result = await response.json();\n      setUploadedFiles(result);\n      onUploadClicked(result); // Callback function after successful upload\n    } catch (error) {\n      console.error('Error uploading files:', error);\n      // Handle upload error\n    }\n  };\n\n  // Effect hook to handle drag and drop events\n  useEffect(() => {\n    setServerOrigin(`${window.location.protocol}//${window.location.hostname}:3001`);\n    const dropzone = dropzoneRef.current;\n    const handleDragEnter = e => {\n      e.preventDefault();\n    };\n    const handleDragOver = e => {\n      e.preventDefault();\n    };\n    const handleDrop = e => {\n      e.preventDefault();\n      const files = e.dataTransfer.files;\n      processFiles(files); // Process files immediately on drop\n    };\n\n    const handleChange = e => {\n      processFiles(e.target.files); // Process files immediately on input change\n    };\n\n    dropzone.addEventListener('dragenter', handleDragEnter);\n    dropzone.addEventListener('dragover', handleDragOver);\n    dropzone.addEventListener('drop', handleDrop);\n    fileInputRef.current.addEventListener('change', handleChange);\n    return () => {\n      dropzone.removeEventListener('dragenter', handleDragEnter);\n      dropzone.removeEventListener('dragover', handleDragOver);\n      dropzone.removeEventListener('drop', handleDrop);\n      fileInputRef.current.removeEventListener('change', handleChange);\n    };\n  }, [isFileAdded, dropzoneRef, fileInputRef]);\n\n  // Function to handle uploaded files\n  const handleFiles = async files => {\n    // Clear file list display\n    fileListRef.current.innerHTML = '';\n    let totalSize = 0;\n    let isFolder = false;\n\n    // Check if any of the files represent a folder\n    for (const file of files) {\n      totalSize += file.size;\n      if (file.webkitRelativePath) {\n        isFolder = true;\n      }\n    }\n\n    // Set state based on whether a folder is uploaded\n    setIsFolderUploaded(isFolder);\n    if (isFolder) {\n      // Display folder name and total size\n      const folderName = files[0].webkitRelativePath.split('/')[0];\n      fileListRef.current.textContent = `${files.length} ${files.length < 2 ? 'file' : 'files'}, ${formatBytes(totalSize)} total size`;\n    } else {\n      // Display number of files and their total size\n      fileListRef.current.textContent = `${files.length} files, ${formatBytes(totalSize)} total size`;\n    }\n\n    // Set state to indicate whether files are added\n    setIsFileAdded(files.length > 0);\n    setIsUploadClicked(true);\n\n    // Automatically send files to the server for processing\n    const formData = new FormData();\n    for (const file of files) {\n      formData.append('files', file);\n    }\n    try {\n      // Send a POST request to the server\n      const response = await fetch(`${serverOrigin}/processFiles`, {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        console.log('Files processed successfully');\n        // Parse and set the processed data\n        const processedData = await response.json();\n        setUploadedFiles(processedData);\n\n        // Fetch updated photoList.json\n        const photoListResponse = await fetch('http://localhost:3001/photoList');\n        const newPhotoList = await photoListResponse.json();\n        setUploadedFiles(newPhotoList);\n\n        // Trigger the callback function with uploaded data and settings\n        const upscaleImages = 'true';\n        const qualitySet = 'true';\n        onUploadClicked(newPhotoList, upscaleImages, qualitySet);\n\n        // Trigger the form submission\n        document.getElementById('folderUpload-formBody').submit();\n      } else {\n        console.error('Failed to process files');\n        // Handle error UI feedback\n      }\n    } catch (error) {\n      console.error('Error processing files:', error);\n      // Handle error UI feedback\n    }\n  };\n\n  // Function to format bytes into readable size\n  const formatBytes = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async () => {\n    // Create FormData from the form\n    const formData = new FormData(document.getElementById('folderUpload-formBody'));\n\n    // Set isUpscaled and isQualitySet based on checkbox values\n    const upscaleImages = 'true';\n    setIsUpscaled(upscaleImages);\n    const qualitySet = 'true';\n    setIsQualitySet(qualitySet);\n\n    // Append qualitySet and upscaleImages to FormData\n    formData.append('qualitySet', qualitySet);\n    formData.append('upscaleImages', upscaleImages);\n    try {\n      // Send a POST request to upload files\n      const response = await fetch('http://localhost:3001/uploads', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        console.log('Folder uploaded successfully');\n        // Get the response body\n        const text = await response.text();\n        console.log(\"Server Response:\", text);\n\n        // Fetch updated photoList.json\n        const photoListResponse = await fetch('http://localhost:3001/photoList');\n        const newPhotoList = await photoListResponse.json();\n        setUploadedFiles(newPhotoList);\n\n        // Trigger the callback function with uploaded data and settings\n        onUploadClicked(newPhotoList, upscaleImages, qualitySet);\n      }\n    } catch (error) {\n      console.error('There was a problem with the upload:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex lg:flex-row flex-col w-full transition-container bg-stone-950 items-center justify-center py-28 -mb-12\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-input h-full w-full pt-5 pb-7 flex flex-col items-center px-4 gap-14\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-[50px] lg:max-w-[26ch] font-bold text-indigo-200 text-center\",\n        children: \"Upload an image, video, or folder to upscale the quality\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"folderUpload-formBody\",\n        onSubmit: handleSubmit,\n        encType: \"multipart/form-data\",\n        className: \"min-w-full lg:min-w-[600px] lg:max-h-[600px]\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: dropzoneRef,\n          className: `bg-stone-900 px-8 py-20 text-center rounded-lg border-dashed border-2 hover:border-indigo-400 transition duration-300 ease-in-out transform hover:shadow-lg ${isFileAdded ? 'border-indigo-400' : 'border-indigo-200'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fileInput\",\n            className: \"cursor-pointer flex flex-col items-center space-y-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              className: `w-16 h-16 text-indigo-200 group-hover:text-indigo-400 transition duration-300 ease-in-out transform ${isFileAdded ? 'text-indigo-400' : 'text-indigo-200'}`,\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: \"2\",\n                d: \"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `text-indigo-200 group-hover:text-indigo-400 transition duration-300 ease-in-out transform ${isFileAdded ? 'text-indigo-400' : 'text-indigo-200'}`,\n              children: \"Drag and drop your files here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `text-indigo-200 group-hover:text-indigo-400 text-sm transition duration-300 ease-in-out transform ${isFileAdded ? 'text-indigo-400' : 'text-indigo-200'}`,\n              children: \"(or click to select)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"fileInput\",\n            ref: fileInputRef,\n            type: \"file\",\n            className: \"hidden file-list\",\n            name: \"folderUpload\",\n            webkitdirectory: \"true\",\n            directory: \"true\",\n            multiple: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex w-full items-center justify-center gap-3 cursor-not-allowed\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col w-full items-center gap-3 ml-1\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center w-full text-indigo-950 ring-indigo-400 bg-indigo-300 bg-opacity-50 ring-2 py-1.5 h-[36px]\",\n              ref: fileListRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 9\n  }, this);\n}\n_s(UpdateImageInput, \"8bzqkwNDsY8j2kNEWBhvqQ6CKNs=\");\n_c = UpdateImageInput;\n;\nexport default UpdateImageInput;\nvar _c;\n$RefreshReg$(_c, \"UpdateImageInput\");","map":{"version":3,"names":["React","useRef","useState","useEffect","uploadIcon","jsxDEV","_jsxDEV","UpdateImageInput","onUploadClicked","_s","dropzoneRef","fileInputRef","fileListRef","uploadedFiles","setUploadedFiles","isUpscaled","setIsUpscaled","isQualitySet","setIsQualitySet","isUploadClicked","setIsUploadClicked","isFileAdded","setIsFileAdded","isFolderUploaded","setIsFolderUploaded","serverOrigin","setServerOrigin","serverEndpoint","processFiles","files","formData","FormData","file","append","response","fetch","method","body","ok","Error","result","json","error","console","window","location","protocol","hostname","dropzone","current","handleDragEnter","e","preventDefault","handleDragOver","handleDrop","dataTransfer","handleChange","target","addEventListener","removeEventListener","handleFiles","innerHTML","totalSize","isFolder","size","webkitRelativePath","folderName","split","textContent","length","formatBytes","log","processedData","photoListResponse","newPhotoList","upscaleImages","qualitySet","document","getElementById","submit","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed","handleSubmit","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onSubmit","encType","ref","htmlFor","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","type","name","webkitdirectory","directory","multiple","_c","$RefreshReg$"],"sources":["C:/Users/dsafr/Documents/Dev/AutoKeyworder/src/components/upload/UpscaleImageInput.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport uploadIcon from '../../assets/upload-icon.png';\r\n\r\n\r\n/**\r\n * Component for updating image input with drag and drop functionality.\r\n * @param {Function} onUploadClicked - Callback function triggered on upload.\r\n */\r\nfunction UpdateImageInput({ onUploadClicked }) {\r\n    // Refs for DOM elements\r\n    const dropzoneRef = useRef(null);\r\n    const fileInputRef = useRef(null);\r\n    const fileListRef = useRef(null);\r\n\r\n    // State variables\r\n    const [uploadedFiles, setUploadedFiles] = useState([]);\r\n    const [isUpscaled, setIsUpscaled] = useState(false);\r\n    const [isQualitySet, setIsQualitySet] = useState(false);\r\n    const [isUploadClicked, setIsUploadClicked] = useState(false);\r\n    const [isFileAdded, setIsFileAdded] = useState(false);\r\n    const [isFolderUploaded, setIsFolderUploaded] = useState(false);\r\n    const [serverOrigin, setServerOrigin] = useState('');\r\n\r\n    // Server endpoint for file upload\r\n    const serverEndpoint = 'http://localhost:3001/upload';\r\n\r\n    // Process and upload files\r\n    const processFiles = async (files) => {\r\n        const formData = new FormData();\r\n        for (const file of files) {\r\n            formData.append('files', file); // 'files' is the field name\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(serverEndpoint, {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Server responded with an error!');\r\n            }\r\n\r\n            const result = await response.json();\r\n            setUploadedFiles(result);\r\n            onUploadClicked(result);  // Callback function after successful upload\r\n        } catch (error) {\r\n            console.error('Error uploading files:', error);\r\n            // Handle upload error\r\n        }\r\n    };\r\n    \r\n    // Effect hook to handle drag and drop events\r\n    useEffect(() => {\r\n        setServerOrigin(`${window.location.protocol}//${window.location.hostname}:3001`);\r\n        const dropzone = dropzoneRef.current;\r\n\r\n        const handleDragEnter = (e) => {\r\n            e.preventDefault();\r\n        };\r\n\r\n        const handleDragOver = (e) => {\r\n            e.preventDefault();\r\n        };\r\n\r\n        const handleDrop = (e) => {\r\n            e.preventDefault();\r\n            const files = e.dataTransfer.files;\r\n            processFiles(files);  // Process files immediately on drop\r\n        };\r\n\r\n        const handleChange = (e) => {\r\n            processFiles(e.target.files);  // Process files immediately on input change\r\n        };\r\n\r\n        dropzone.addEventListener('dragenter', handleDragEnter);\r\n        dropzone.addEventListener('dragover', handleDragOver);\r\n        dropzone.addEventListener('drop', handleDrop);\r\n        fileInputRef.current.addEventListener('change', handleChange);\r\n\r\n        return () => {\r\n            dropzone.removeEventListener('dragenter', handleDragEnter);\r\n            dropzone.removeEventListener('dragover', handleDragOver);\r\n            dropzone.removeEventListener('drop', handleDrop);\r\n            fileInputRef.current.removeEventListener('change', handleChange);\r\n        };\r\n    }, [isFileAdded, dropzoneRef, fileInputRef]);\r\n\r\n    // Function to handle uploaded files\r\n    const handleFiles = async (files) => {\r\n        // Clear file list display\r\n        fileListRef.current.innerHTML = '';\r\n        let totalSize = 0;\r\n        let isFolder = false;\r\n\r\n        // Check if any of the files represent a folder\r\n        for (const file of files) {\r\n            totalSize += file.size;\r\n            if (file.webkitRelativePath) {\r\n                isFolder = true;\r\n            }\r\n        }\r\n\r\n        // Set state based on whether a folder is uploaded\r\n        setIsFolderUploaded(isFolder);\r\n\r\n        if (isFolder) {\r\n            // Display folder name and total size\r\n            const folderName = files[0].webkitRelativePath.split('/')[0];\r\n            fileListRef.current.textContent = `${files.length} ${files.length < 2 ? 'file' : 'files' }, ${formatBytes(totalSize)} total size`;\r\n        } else {\r\n            // Display number of files and their total size\r\n            fileListRef.current.textContent = `${files.length} files, ${formatBytes(totalSize)} total size`;\r\n        }\r\n\r\n        // Set state to indicate whether files are added\r\n        setIsFileAdded(files.length > 0);\r\n        setIsUploadClicked(true);\r\n\r\n        // Automatically send files to the server for processing\r\n        const formData = new FormData();\r\n        for (const file of files) {\r\n            formData.append('files', file);\r\n        }\r\n\r\n        try {\r\n            // Send a POST request to the server\r\n            const response = await fetch(`${serverOrigin}/processFiles`, {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log('Files processed successfully');\r\n                // Parse and set the processed data\r\n                const processedData = await response.json();\r\n                setUploadedFiles(processedData);\r\n\r\n                // Fetch updated photoList.json\r\n                const photoListResponse = await fetch('http://localhost:3001/photoList');\r\n                const newPhotoList = await photoListResponse.json();\r\n                setUploadedFiles(newPhotoList);\r\n\r\n                // Trigger the callback function with uploaded data and settings\r\n                const upscaleImages = 'true';\r\n                const qualitySet = 'true';\r\n                onUploadClicked(newPhotoList, upscaleImages, qualitySet);\r\n\r\n                // Trigger the form submission\r\n                document.getElementById('folderUpload-formBody').submit();\r\n            } else {\r\n                console.error('Failed to process files');\r\n                // Handle error UI feedback\r\n            }\r\n        } catch (error) {\r\n            console.error('Error processing files:', error);\r\n            // Handle error UI feedback\r\n        }\r\n    };\r\n\r\n    // Function to format bytes into readable size\r\n    const formatBytes = (bytes) => {\r\n        if (bytes === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    };\r\n\r\n    // Function to handle form submission\r\n    const handleSubmit = async () => {\r\n        // Create FormData from the form\r\n        const formData = new FormData(document.getElementById('folderUpload-formBody'));\r\n\r\n        // Set isUpscaled and isQualitySet based on checkbox values\r\n        const upscaleImages = 'true';\r\n        setIsUpscaled(upscaleImages);\r\n        const qualitySet = 'true';\r\n        setIsQualitySet(qualitySet);\r\n\r\n        // Append qualitySet and upscaleImages to FormData\r\n        formData.append('qualitySet', qualitySet);\r\n        formData.append('upscaleImages', upscaleImages);\r\n\r\n        try {\r\n            // Send a POST request to upload files\r\n            const response = await fetch('http://localhost:3001/uploads', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log('Folder uploaded successfully');\r\n                // Get the response body\r\n                const text = await response.text();\r\n                console.log(\"Server Response:\", text);\r\n\r\n                // Fetch updated photoList.json\r\n                const photoListResponse = await fetch('http://localhost:3001/photoList');\r\n                const newPhotoList = await photoListResponse.json();\r\n                setUploadedFiles(newPhotoList);\r\n\r\n                // Trigger the callback function with uploaded data and settings\r\n                onUploadClicked(newPhotoList, upscaleImages, qualitySet);\r\n            }\r\n        } catch (error) {\r\n            console.error('There was a problem with the upload:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex lg:flex-row flex-col w-full transition-container bg-stone-950 items-center justify-center py-28 -mb-12\">\r\n            \r\n            <div className=\"image-input h-full w-full pt-5 pb-7 flex flex-col items-center px-4 gap-14\">\r\n\r\n                <h1 className='text-[50px] lg:max-w-[26ch] font-bold text-indigo-200 text-center'>Upload an image, video, or folder to upscale the quality</h1>\r\n\r\n                <form id=\"folderUpload-formBody\" onSubmit={handleSubmit} encType=\"multipart/form-data\" className='min-w-full lg:min-w-[600px] lg:max-h-[600px]'>\r\n\r\n                    {/* DROP ZONE */}\r\n                    <div\r\n                        ref={dropzoneRef}\r\n                        className={`bg-stone-900 px-8 py-20 text-center rounded-lg border-dashed border-2 hover:border-indigo-400 transition duration-300 ease-in-out transform hover:shadow-lg ${isFileAdded ? 'border-indigo-400' : 'border-indigo-200'}`}\r\n                    >\r\n                        <label htmlFor=\"fileInput\" className=\"cursor-pointer flex flex-col items-center space-y-2\">\r\n                            <svg className={`w-16 h-16 text-indigo-200 group-hover:text-indigo-400 transition duration-300 ease-in-out transform ${isFileAdded ? 'text-indigo-400' : 'text-indigo-200'}`} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\r\n                            </svg>\r\n                            <span className={`text-indigo-200 group-hover:text-indigo-400 transition duration-300 ease-in-out transform ${isFileAdded ? 'text-indigo-400' : 'text-indigo-200'}`}>Drag and drop your files here</span>\r\n                            <span className={`text-indigo-200 group-hover:text-indigo-400 text-sm transition duration-300 ease-in-out transform ${isFileAdded ? 'text-indigo-400' : 'text-indigo-200'}`}>(or click to select)</span>\r\n                        </label>\r\n                        <input id=\"fileInput\" ref={fileInputRef} type=\"file\" className=\"hidden file-list\" name=\"folderUpload\" webkitdirectory=\"true\" directory=\"true\" multiple />\r\n                    </div>\r\n                    \r\n\r\n                    {/* OPTION BUTTONS */}\r\n                    <div className=\"flex w-full items-center justify-center gap-3 cursor-not-allowed\">\r\n                        {/* REFERENCE BOX */}\r\n                        <div className=\"flex flex-col w-full items-center gap-3 ml-1\">\r\n                            <div className=\"text-center w-full text-indigo-950 ring-indigo-400 bg-indigo-300 bg-opacity-50 ring-2 py-1.5 h-[36px]\" ref={fileListRef}></div>                    \r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateImageInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}