import { Languages } from '../shared-types';
import { HTTPClient } from './HTTPClient';
export type SceneXRawInput = {
    data: Array<{
        image?: string;
        video?: string;
        algorithm?: 'Aqua' | 'Bolt' | 'Comet' | 'Dune' | 'Ember' | 'Flash' | 'Glide' | 'Hearth' | 'Inception';
        features: Array<'high_quality' | 'question_answer' | 'tts' | 'opt-out'>;
        languages?: Array<Languages>;
        question?: string;
        style?: 'default' | 'concise' | 'prompt';
        output_length?: number | null;
    }>;
};
export type SceneXOptions = {
    algorithm?: 'Aqua' | 'Bolt' | 'Comet' | 'Dune' | 'Ember' | 'Flash' | 'Glide' | 'Hearth' | 'Inception';
    features?: Array<'high_quality' | 'question_answer' | 'tts' | 'opt-out'>;
    languages?: Array<Languages>;
    question?: string;
    style?: 'default' | 'concise' | 'prompt';
    output_length?: number | null;
    reportProgress?: (videoIndex: number, progress: string) => void;
    raw?: boolean;
};
export type SceneXStoryOutput = Array<{
    isNarrator: boolean;
    message: string;
    name: string;
}>;
export type SceneXSVideoOutput = {
    summary: string;
    events: Array<{
        description: string;
        timestamp: string;
    }>;
};
export type SceneXSceneRawOutput = {
    id: string;
    image?: string;
    video?: string;
    features: Array<'high_quality' | 'question_answer' | 'tts' | 'opt-out'>;
    question?: string;
    languages?: Array<Languages>;
    uid: string;
    optOut: boolean;
    algorithm: 'Aqua' | 'Bolt' | 'Comet' | 'Dune' | 'Ember' | 'Flash' | 'Glide' | 'Hearth' | 'Inception';
    text?: string;
    userId: string;
    createdAt: number;
    i18n: {
        [key: string]: string | SceneXStoryOutput | SceneXSVideoOutput;
    };
    answer?: string;
    tts?: {
        [key: string]: string;
    };
    dialog?: {
        names: Array<string>;
        ssml: {
            [key: string]: string;
        };
    } | null;
    status?: 'pending' | string;
    progress?: string;
};
export type SceneXRawOutput = {
    result: Array<SceneXSceneRawOutput>;
};
export type SceneXMonoRawOutput = {
    result: {
        data: SceneXSceneRawOutput;
    };
};
export type SceneXOutput = {
    results: Array<{
        output: string;
        i18n?: {
            [key: string]: string | SceneXStoryOutput | SceneXSVideoOutput;
        };
        tts?: {
            [key: string]: string;
        };
        ssml?: {
            [key: string]: string;
        };
    }>;
    raw?: SceneXRawOutput;
};
export type SceneXParams = {
    headers?: Record<string, string>;
    options?: Record<string, any>;
    baseURL?: string;
};
export declare const autoFillFeatures: (options?: SceneXOptions) => ("high_quality" | "question_answer" | "tts" | "opt-out")[];
export declare class SceneXClient extends HTTPClient {
    constructor(params: SceneXParams);
    fromArray(input: Array<string>, options?: SceneXOptions): SceneXRawInput;
    fromString(input: string, options?: SceneXOptions): SceneXRawInput;
    isOutput(obj: any): obj is SceneXRawOutput;
    toSimplifiedOutout(output: SceneXRawOutput): SceneXOutput;
    describeVideo(output: SceneXRawOutput, options?: SceneXOptions): Promise<SceneXRawOutput>;
    describe(data: SceneXRawInput, options?: SceneXOptions): Promise<SceneXOutput>;
}
