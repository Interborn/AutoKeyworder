import { HTTPClient } from './HTTPClient';
export type BestBannerRawInput = {
    data: Array<{
        text: string;
        style?: 'default' | 'photographic' | 'minimalist' | 'flat';
    }>;
};
export type BestBannerOptions = {
    style?: 'default' | 'photographic' | 'minimalist' | 'flat';
    raw?: boolean;
};
export type BestBannerRawOutput = {
    result: Array<{
        id: string;
        userId: string;
        text: string;
        plainText?: string | null;
        title: string;
        style?: 'default' | 'photographic' | 'minimalist' | 'flat' | null;
        description: string;
        resolution: {
            width: number;
            height: number;
        };
        banners: Array<{
            id: string;
            url: string;
        }>;
        createdAt: {
            nanoseconds: number;
            seconds: number;
        };
        status: string;
        metaData: {
            [key: string]: any;
        };
    }>;
};
export type BestBannerOutput = {
    results: Array<{
        output: Array<string>;
    }>;
    raw?: BestBannerRawOutput;
};
export type BestBannerParams = {
    headers?: Record<string, string>;
    options?: Record<string, any>;
    baseURL?: string;
};
export declare class BestBannerClient extends HTTPClient {
    constructor(params: BestBannerParams);
    fromArray(input: Array<string>, options?: BestBannerOptions): BestBannerRawInput;
    fromString(input: string, options?: BestBannerOptions): BestBannerRawInput;
    isOutput(obj: any): obj is BestBannerRawOutput;
    toSimplifiedOutout(output: BestBannerRawOutput): BestBannerOutput;
    imagine(data: BestBannerRawInput, options?: BestBannerOptions): Promise<BestBannerOutput>;
}
