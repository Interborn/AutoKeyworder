import { HTTPClient } from './HTTPClient';
export type JinaChatRawInput = {
    messages: Array<{
        role: 'user' | 'assistant';
        name?: string;
        content: string;
        image?: string;
    }>;
    chatId?: string;
    stream?: boolean;
    temperature?: number;
    top_p?: number;
    stop?: string | Array<string>;
    max_tokens?: number;
    presence_penalty?: number;
    frequency_penalty?: number;
    logit_bias?: {
        [key: string]: number;
    };
};
export type JinaChatOptions = {
    role?: 'user' | 'assistant';
    name?: string;
    chatId?: string;
    stream?: boolean;
    temperature?: number;
    top_p?: number;
    stop?: string | Array<string>;
    max_tokens?: number;
    presence_penalty?: number;
    frequency_penalty?: number;
    logit_bias?: {
        [key: string]: number;
    };
    raw?: boolean;
    image?: string;
};
export type JinaChatRawOutput = {
    chatId: string;
    inputMessageId: string;
    responseMessageId: string;
    choices: Array<{
        index: number;
        message: {
            role: string;
            content: string;
        };
        finish_reason: string;
    }>;
    usage: {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
    };
};
export type JinaChatOutput = {
    output: string;
    chatId: string;
    raw?: JinaChatRawOutput;
};
export type JinaChatParams = {
    headers?: Record<string, string>;
    options?: Record<string, any>;
    baseURL?: string;
};
export declare class JinaChatClient extends HTTPClient {
    constructor(params: JinaChatParams);
    fromArray(input: Array<string>, options?: JinaChatOptions): JinaChatRawInput;
    fromString(input: string, options?: JinaChatOptions): JinaChatRawInput;
    isOutput(obj: any): obj is JinaChatRawOutput;
    toSimplifiedOutout(output: JinaChatRawOutput): JinaChatOutput;
    generate(data: JinaChatRawInput, options?: JinaChatOptions): Promise<JinaChatOutput>;
    stream(data: JinaChatRawInput, _options?: JinaChatOptions): Promise<ReadableStreamDefaultReader>;
}
