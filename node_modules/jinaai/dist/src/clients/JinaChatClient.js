"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JinaChatClient = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("../utils");
var HTTPClient_1 = require("./HTTPClient");
var JinaChatClient = (function (_super) {
    tslib_1.__extends(JinaChatClient, _super);
    function JinaChatClient(params) {
        var headers = params.headers, options = params.options, _a = params.baseURL, baseURL = _a === void 0 ? 'https://api.chat.jina.ai/v1/chat' : _a;
        var defaultHeaders = {
            'Content-Type': 'application/json',
        };
        var mergedHeaders = tslib_1.__assign(tslib_1.__assign({}, defaultHeaders), headers);
        return _super.call(this, { baseURL: baseURL, headers: mergedHeaders, options: options || {} }) || this;
    }
    JinaChatClient.prototype.fromArray = function (input, options) {
        return tslib_1.__assign({ messages: input.map(function (i) { return (tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ content: i }, (options && options.image && ((0, utils_1.isUrl)(options.image) || (0, utils_1.isBase64)(options.image)) && {
                image: options.image
            })), { role: 'user' }), (0, utils_1.omit)(options, 'image'))); }) }, (0, utils_1.omit)(options, 'image'));
    };
    JinaChatClient.prototype.fromString = function (input, options) {
        return tslib_1.__assign({ messages: [tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ content: input }, (options && options.image && ((0, utils_1.isUrl)(options.image) || (0, utils_1.isBase64)(options.image)) && {
                    image: options.image
                })), { role: 'user' }), (0, utils_1.omit)(options, 'image'))] }, (0, utils_1.omit)(options, 'image'));
    };
    JinaChatClient.prototype.isOutput = function (obj) {
        return typeof obj === 'object' && obj.chatId && obj.responseContent;
    };
    JinaChatClient.prototype.toSimplifiedOutout = function (output) {
        if (!output.choices || output.choices.length < 1 || output.choices[0].message.content == '')
            throw 'Remote API Error, bad output: ' + JSON.stringify(output);
        return {
            output: output.choices[0].message.content,
            chatId: output.chatId
        };
    };
    JinaChatClient.prototype.generate = function (data, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rawOutput, simplifiedOutput;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.post('/completions', data)];
                    case 1:
                        rawOutput = _a.sent();
                        simplifiedOutput = this.toSimplifiedOutout(rawOutput);
                        if ((options === null || options === void 0 ? void 0 : options.raw) == true)
                            simplifiedOutput.raw = rawOutput;
                        return [2, simplifiedOutput];
                }
            });
        });
    };
    JinaChatClient.prototype.stream = function (data, _options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.post('/completions', data, false)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    return JinaChatClient;
}(HTTPClient_1.HTTPClient));
exports.JinaChatClient = JinaChatClient;
//# sourceMappingURL=JinaChatClient.js.map