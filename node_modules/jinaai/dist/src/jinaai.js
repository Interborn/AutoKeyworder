"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var PromptPerfectClient_1 = require("./clients/PromptPerfectClient");
var SceneXClient_1 = require("./clients/SceneXClient");
var RationaleClient_1 = require("./clients/RationaleClient");
var JinaChatClient_1 = require("./clients/JinaChatClient");
var BestBannerClient_1 = require("./clients/BestBannerClient");
var HTTPClient_1 = require("./clients/HTTPClient");
var utils_1 = tslib_1.__importDefault(require("./utils"));
tslib_1.__exportStar(require("./clients/HTTPClient"), exports);
tslib_1.__exportStar(require("./clients/JinaChatClient"), exports);
tslib_1.__exportStar(require("./clients/PromptPerfectClient"), exports);
tslib_1.__exportStar(require("./clients/RationaleClient"), exports);
tslib_1.__exportStar(require("./clients/SceneXClient"), exports);
tslib_1.__exportStar(require("./shared-types"), exports);
var JinaAI = (function () {
    function JinaAI(params) {
        var _a, _b, _c, _d, _e;
        this.utils = utils_1.default;
        var _f = params || {}, secrets = _f.secrets, options = _f.options;
        var PPSecret = secrets && secrets['promptperfect-secret'] ? "token ".concat(secrets['promptperfect-secret']) : '';
        var SXSecret = secrets && secrets['scenex-secret'] ? "token ".concat(secrets['scenex-secret']) : '';
        var RASecret = secrets && secrets['rationale-secret'] ? "token ".concat(secrets['rationale-secret']) : '';
        var CCSecret = secrets && secrets['jinachat-secret'] ? "Bearer ".concat(secrets['jinachat-secret']) : '';
        var BBClient = secrets && secrets['bestbanner-secret'] ? "token ".concat(secrets['bestbanner-secret']) : '';
        var ppCustomUrl = (_a = params === null || params === void 0 ? void 0 : params.baseUrls) === null || _a === void 0 ? void 0 : _a.promptperfect;
        var sxCustomUrl = (_b = params === null || params === void 0 ? void 0 : params.baseUrls) === null || _b === void 0 ? void 0 : _b.scenex;
        var raCustomUrl = (_c = params === null || params === void 0 ? void 0 : params.baseUrls) === null || _c === void 0 ? void 0 : _c.rationale;
        var ccCustomUrl = (_d = params === null || params === void 0 ? void 0 : params.baseUrls) === null || _d === void 0 ? void 0 : _d.jinachat;
        var bbCustomUrl = (_e = params === null || params === void 0 ? void 0 : params.baseUrls) === null || _e === void 0 ? void 0 : _e.bestbanner;
        this.PPClient = new PromptPerfectClient_1.PromptPerfectClient({ headers: { 'x-api-key': PPSecret }, options: options, baseURL: ppCustomUrl });
        this.SXClient = new SceneXClient_1.SceneXClient({ headers: { 'x-api-key': SXSecret }, options: options, baseURL: sxCustomUrl });
        this.RAClient = new RationaleClient_1.RationaleClient({ headers: { 'x-api-key': RASecret }, options: options, baseURL: raCustomUrl });
        this.CCClient = new JinaChatClient_1.JinaChatClient({ headers: { 'authorization': CCSecret }, options: options, baseURL: ccCustomUrl });
        this.BBClient = new BestBannerClient_1.BestBannerClient({ headers: { 'x-api-key': BBClient }, options: options, baseURL: bbCustomUrl });
    }
    JinaAI.prototype.decide = function (input, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (Array.isArray(input))
                            data = this.RAClient.fromArray(input, options);
                        else if (typeof input === 'string')
                            data = this.RAClient.fromString(input, options);
                        else
                            data = input;
                        return [4, this.RAClient.decide(data, options)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    JinaAI.prototype.optimize = function (input, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (Array.isArray(input))
                            data = this.PPClient.fromArray(input, options);
                        else if (typeof input === 'string')
                            data = this.PPClient.fromString(input, options);
                        else
                            data = input;
                        return [4, this.PPClient.optimize(data, options)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    JinaAI.prototype.describe = function (input, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (Array.isArray(input))
                            data = this.SXClient.fromArray(input, options);
                        else if (typeof input === 'string')
                            data = this.SXClient.fromString(input, options);
                        else
                            data = input;
                        return [4, this.SXClient.describe(data, options)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    JinaAI.prototype.generate = function (input, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (Array.isArray(input))
                            data = this.CCClient.fromArray(input, options);
                        else if (typeof input === 'string')
                            data = this.CCClient.fromString(input, options);
                        else
                            data = input;
                        if (!!!(options === null || options === void 0 ? void 0 : options.stream)) return [3, 2];
                        return [4, this.CCClient.stream(data, options)];
                    case 1: return [2, _a.sent()];
                    case 2: return [4, this.CCClient.generate(data, options)];
                    case 3: return [2, _a.sent()];
                }
            });
        });
    };
    JinaAI.prototype.imagine = function (input, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (Array.isArray(input))
                            data = this.BBClient.fromArray(input, options);
                        else if (typeof input === 'string')
                            data = this.BBClient.fromString(input, options);
                        else
                            data = input;
                        return [4, this.BBClient.imagine(data, options)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    JinaAI.utils = utils_1.default;
    JinaAI.HTTPClient = HTTPClient_1.HTTPClient;
    JinaAI.BestBannerClient = BestBannerClient_1.BestBannerClient;
    JinaAI.JinaChatClient = JinaChatClient_1.JinaChatClient;
    JinaAI.SceneXClient = SceneXClient_1.SceneXClient;
    JinaAI.RationaleClient = RationaleClient_1.RationaleClient;
    JinaAI.PromptPerfectClient = PromptPerfectClient_1.PromptPerfectClient;
    return JinaAI;
}());
if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = JinaAI;
}
exports.default = JinaAI;
//# sourceMappingURL=jinaai.js.map